[[plugins]]
repo = 'nordtheme/vim'
hook_add = '''
colorscheme nord
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
call ddc#custom#patch_global({
	\	'ui': 'native',
	\	'sources': ['vim-lsp', 'around'],
	\	'sourceOptions': {
	\		'_': {
	\			'ignoreCase': v:true,
	\			'matchers': ['matcher_fuzzy'],
	\			'sorters': ['sorter_fuzzy'],
	\		},
	\		'around': {
	\			'mark': '[A]'
	\		},
	\		'vim-lsp': {
	\			'mark': '[LSP]',
	\			'forceCompletionPattern': '\.\w*|:\w*|->\w*',
	\		},
	\	}})
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'shun/ddc-source-vim-lsp'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=yes
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> gs <plug>(lsp-document-symbol-search)
	nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
	nmap <buffer> ca <Cmd>LspCodeAction<CR>
	nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
	nnoremap <buffer> <expr><c-b> lsp#scroll(-4)

	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
    
augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
	\ 'ui': 'filer',
	\ 'sources': [{'name': 'file'}],
	\ 'sourceOptions': {
	\   '_': {
	\     'columns': ['icon_filename'],
	\   },
	\ },
	\ 'uiParams': {
	\		'filer': {
	\			'split': 'vertical',
	\		},
	\	},
	\ 'kindOptions': {
	\   'file': {
	\     'defaultAction': 'open',
	\ }}})
autocmd FileType ddu-filer call s:ddu_filer_settings()
function! s:ddu_filer_settings() abort
  nnoremap <buffer><silent> <CR>
		\ <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer> o
    \ <Cmd>call ddu#ui#do_action('expandItem',
    \ {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> q
    \ <Cmd>call ddu#ui#do_action('quit')<CR>
endfunction
nnoremap <leader>fe <Cmd>call ddu#start({'name': 'ddu-filer'})<CR>

call ddu#custom#patch_local('ddu-buffer', {
	\	'ui': 'ff',
	\	'sources': [{'name': 'buffer'}],
	\ 'sourceOptions': {
	\   '_': {
	\     'columns': ['icon_filename'],
	\   },
	\ },
	\ 'kindOptions': {
	\   'file': {
	\     'defaultAction': 'open',
	\ }}})
autocmd FileType ddu-ff call s:ddu_buffer_settings()
function! s:ddu_buffer_settings() abort
	nnoremap <buffer><silent> <CR>
		\	<Cmd>call ddu#ui#do_action('itemAction')<CR>
	nnoremap <buffer><silent> q
		\	<Cmd>call ddu#ui#do_action('quit')<CR>
endfunction
nnoremap <leader>fb <Cmd>call ddu#start({'name': 'ddu-buffer'})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
