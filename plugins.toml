[[plugins]]
repo = 'nordtheme/vim'
hook_add = '''
colorscheme nord
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
call ddc#custom#patch_global({
	\	'ui': 'native',
	\	'sources': ['vim-lsp', 'around'],
	\	'sourceOptions': {
	\		'_': {
	\			'ignoreCase': v:true,
	\			'matchers': ['matcher_fuzzy'],
	\			'sorters': ['sorter_fuzzy'],
	\		},
	\		'around': {
	\			'mark': '[A]'
	\		},
	\		'vim-lsp': {
	\			'mark': '[LSP]',
	\			'forceCompletionPattern': '\.\w*|:\w*|->\w*',
	\		},
	\	}})
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-source-around'

[[plugins]]
repo = 'shun/ddc-source-vim-lsp'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=yes
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gd <plug>(lsp-definition)
	nmap <buffer> gs <plug>(lsp-document-symbol-search)
	nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
	nmap <buffer> ca <Cmd>LspCodeAction<CR>
	nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
	nnoremap <buffer> <expr><c-b> lsp#scroll(-4)

	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
    
augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
autocmd FileType ddu-ff call s:ddu_ff_settings()
function! s:ddu_ff_settings() abort
	nnoremap <buffer><silent> <CR>
		\	<Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer> o
    \ <Cmd>call ddu#ui#do_action('expandItem',
    \ {'mode': 'toggle'})<CR>
	nnoremap <buffer><silent> q
		\	<Cmd>call ddu#ui#do_action('quit')<CR>
	nnoremap <buffer> n
		\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newFile'})<CR>
	nnoremap <buffer> r
		\ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'rename'})<CR>
	nnoremap <buffer> d
		\	<Cmd>call ddu#ui#do_action('itemAction', {'name': 'delete'})<CR>
	nnoremap <buffer> m
		\	<Cmd>call ddu#ui#do_action('itemAction', {'name': 'move'})<CR>
nnoremap <buffer> > <Cmd>call ddu#ui#do_action('updateOptions', {
\   'sourceOptions': {
\     'file': {
\       'matchers': ToggleHidden(),
\     },
\     'file_rec': {
\       'matchers': ToggleHidden(),
\     },
\   },
\ }) \| call ddu#redraw('refreshItems')<CR>
endfunction

function! ToggleHidden()
  let current = ddu#custom#get_current(b:ddu_ui_name)
  let source_options = get(current, 'sourceOptions', {})
  let file_matchers = get(get(source_options, 'file', {}), 'matchers', [])
  let rec_matchers = get(get(source_options, 'file_rec', {}), 'matchers', [])
  return empty(file_matchers) && empty(rec_matchers) ? ['matcher_hidden'] : []
endfunction

call ddu#custom#alias('default', 'column', 'icon_filename_for_ff', 'icon_filename')
call ddu#custom#patch_global({
	\ 'ui': 'ff',
	\ 'sources': [{'name': 'file'}],
	\ 'sourceOptions': {
	\		'_': {
	\			'sorters': [
	\				'sorter_alpha',
	\				'sorter_treefirst',
	\			],
	\		},
	\		'file': {
	\			'columns': ['icon_filename']
	\		},
	\		'file_rec': {
	\			'columns': ['icon_filename_for_ff']
	\		}
	\	},
	\	'columnParams': {
	\		'icon_filename': {
	\			'defaultIcon': {
	\				'icon': '',
	\			},
	\		},
	\		'icon_filename_for_ff': {
	\			'defaultIcon': '',
	\			'padding': 0,
	\			'pathDisplayOption': 'relative',
	\		},
	\	},
	\ 'kindOptions': {
	\   'file': {
	\     'defaultAction': 'open',
	\ }}})
nnoremap <leader>fe <Cmd>call ddu#start({'name': 'ddu-filer'})<CR>

call ddu#custom#patch_local('ddu-buffer', {
	\	'ui': 'ff',
	\	'sources': [{'name': 'buffer'}],
	\ 'sourceOptions': {
	\   '_': {
	\     'columns': [
	\				{
	\					'name': 'icon_filename',
	\					'params': {
	\						'pathDisplayOption': 'relative',
	\					},
	\				},
	\			],
	\   },
	\ },
	\ 'kindOptions': {
	\   'file': {
	\     'defaultAction': 'open',
	\ }}})
nnoremap <leader>fb <Cmd>call ddu#start({'name': 'ddu-buffer'})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'

[[plugins]]
repo = 'xecua/ddu-filter-sorter_treefirst'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
autocmd BufWritePost * GitGutter
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
nnoremap <leader><C-t> <Cmd>FloatermToggle<CR>
'''
